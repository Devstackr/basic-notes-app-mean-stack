{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { ElementRef } from '@angular/core';\nimport { NotesService } from 'src/app/shared/notes.service';\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/notes.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../note-card/note-card.component\";\nvar _c0 = [\"filterInput\"];\nfunction NotesListComponent_app_note_card_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-note-card\", 11);\n    i0.ɵɵlistener(\"delete\", function NotesListComponent_app_note_card_9_Template_app_note_card_delete_0_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r4);\n      var note_r2 = restoredCtx.$implicit;\n      var ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.deleteNote(note_r2));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var note_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"link\", note_r2._id)(\"@itemAnim\", undefined)(\"title\", note_r2.title)(\"body\", note_r2.body);\n  }\n}\nvar NotesListComponent = /** @class */function () {\n  function NotesListComponent(notesService) {\n    this.notesService = notesService;\n    this.notes = new Array();\n    this.filteredNotes = new Array();\n  }\n  NotesListComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    // we want to retrieve all notes from NotesService\n    this.notesService.getAll().subscribe(function (notes) {\n      _this.notes = notes;\n      console.log(_this.notes);\n      _this.filter('');\n    });\n  };\n  NotesListComponent.prototype.deleteNote = function (note) {\n    var _this = this;\n    this.notesService.delete(note._id).subscribe(function (removedNoteDoc) {\n      // remove the note from the notes array\n      _this.notes.splice(_this.notes.indexOf(note), 1);\n      _this.filter(_this.filterInputElRef.nativeElement.value);\n    });\n  };\n  NotesListComponent.prototype.filter = function (query) {\n    var _this = this;\n    query = query.toLowerCase().trim();\n    var allResults = new Array();\n    // split up the search query into individual words\n    var terms = query.split(' '); // split on spaces\n    // remove duplicate search terms\n    terms = this.removeDuplicates(terms);\n    // compile all relevant results into the allResults array\n    terms.forEach(function (term) {\n      var results = _this.relevantNotes(term);\n      // append results to the allResults array\n      allResults = __spreadArray(__spreadArray([], allResults, true), results, true);\n    });\n    // allResults will include duplicate notes\n    // because a particular note can be the result of many search terms\n    // but we don't want to show the same note multiple times on the UI\n    // so we first must remove the duplicates\n    var uniqueResults = this.removeDuplicates(allResults);\n    this.filteredNotes = uniqueResults;\n    // now sort by relevancy\n    this.sortByRelevancy(allResults);\n  };\n  NotesListComponent.prototype.removeDuplicates = function (arr) {\n    var uniqueResults = new Set();\n    // loop through the input array and add the items to the set\n    arr.forEach(function (e) {\n      return uniqueResults.add(e);\n    });\n    return Array.from(uniqueResults);\n  };\n  NotesListComponent.prototype.relevantNotes = function (query) {\n    query = query.toLowerCase().trim();\n    var relevantNotes = this.notes.filter(function (note) {\n      if (note.title && note.title.toLowerCase().includes(query)) {\n        return true;\n      }\n      if (note.body && note.body.toLowerCase().includes(query)) {\n        return true;\n      }\n      return false;\n    });\n    return relevantNotes;\n  };\n  NotesListComponent.prototype.sortByRelevancy = function (searchResults) {\n    // This method will calculate the relevancy of a note based on the number of times it appears in\n    // the search results\n    var noteCountObj = {}; // format - key:value => NoteId:number (note object id : count)\n    searchResults.forEach(function (note) {\n      if (noteCountObj[note._id]) {\n        noteCountObj[note._id] += 1;\n      } else {\n        noteCountObj[note._id] = 1;\n      }\n    });\n    this.filteredNotes = this.filteredNotes.sort(function (a, b) {\n      var aCount = noteCountObj[a._id];\n      var bCount = noteCountObj[b._id];\n      return bCount - aCount;\n    });\n  };\n  NotesListComponent.ɵfac = function NotesListComponent_Factory(t) {\n    return new (t || NotesListComponent)(i0.ɵɵdirectiveInject(i1.NotesService));\n  };\n  NotesListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NotesListComponent,\n    selectors: [[\"app-notes-list\"]],\n    viewQuery: function NotesListComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterInputElRef = _t.first);\n      }\n    },\n    decls: 12,\n    vars: 2,\n    consts: [[1, \"main-container\"], [1, \"search-bar-container\"], [1, \"field\"], [1, \"control\", \"has-icons-left\"], [\"type\", \"text\", \"placeholder\", \"Filter\", 1, \"input\", 3, \"keyup\"], [\"filterInput\", \"\"], [1, \"icon\", \"is-small\", \"is-left\"], [1, \"fas\", \"fa-search\"], [1, \"notes-list\"], [3, \"link\", \"title\", \"body\", \"delete\", 4, \"ngFor\", \"ngForOf\"], [\"routerLink\", \"new\", 1, \"button\", \"floating-add-button\", \"is-primary\"], [3, \"link\", \"title\", \"body\", \"delete\"]],\n    template: function NotesListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"p\", 3)(4, \"input\", 4, 5);\n        i0.ɵɵlistener(\"keyup\", function NotesListComponent_Template_input_keyup_4_listener($event) {\n          return ctx.filter($event.target.value);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"span\", 6);\n        i0.ɵɵelement(7, \"i\", 7);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(8, \"div\", 8);\n        i0.ɵɵtemplate(9, NotesListComponent_app_note_card_9_Template, 1, 4, \"app-note-card\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 10);\n        i0.ɵɵtext(11, \"+ Add\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"@listAnim\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filteredNotes);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.RouterLink, i4.NoteCardComponent],\n    styles: [\"@import\\\"https://fonts.googleapis.com/css?family=Nunito:400,700\\\";html[_ngcontent-%COMP%], body[_ngcontent-%COMP%]{height:100%;font-size:18px!important;overflow:hidden!important}.main-section[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%;justify-content:center;align-items:center}.main-container-box[_ngcontent-%COMP%]{display:flex;flex-direction:column;border-radius:5px;overflow:hidden;box-shadow:0 8px 25px 7px #00000014;width:420px}.main-container-box[_ngcontent-%COMP%]   .form-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%;background:white;padding:50px;overflow-y:auto}.main-container-box[_ngcontent-%COMP%]   .alternate-bar[_ngcontent-%COMP%]{display:flex;flex-direction:row;padding:20px 50px;align-items:center;background:#3d4a51}.main-container-box[_ngcontent-%COMP%]   .alternate-bar[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:18px;color:#fafdff;flex-grow:1}.main-container-box[_ngcontent-%COMP%]   .alternate-bar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{color:#fff;border-color:#f5f5f5;background-color:transparent}.main-container-box[_ngcontent-%COMP%]   .alternate-bar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{border-color:#a59ad7;background-color:#a59ad7}.main-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;max-width:500px;margin:auto;padding-top:50px}.notes-list[_ngcontent-%COMP%]{margin-top:35px;margin-bottom:70px}app-note-card[_ngcontent-%COMP%]{display:block;margin-bottom:25px}.floating-add-button[_ngcontent-%COMP%]{position:fixed;bottom:0;width:500px;border-radius:0;box-shadow:0 0 15px 5px #a59ad733;height:68px;font-size:24px}\"],\n    data: {\n      animation: [trigger('itemAnim', [\n      // ENTRY ANIMATION\n      transition('void => *', [\n      // Initial state\n      style({\n        height: 0,\n        opacity: 0,\n        transform: 'scale(0.85)',\n        'margin-bottom': 0,\n        // we have to 'expand' out the padding properties\n        paddingTop: 0,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0\n      }),\n      // we first want to animate the spacing (which includes height and margin)\n      animate('50ms', style({\n        height: '*',\n        'margin-bottom': '*',\n        paddingTop: '*',\n        paddingBottom: '*',\n        paddingLeft: '*',\n        paddingRight: '*'\n      })), animate(68)]), transition('* => void', [\n      // first scale up\n      animate(50, style({\n        transform: 'scale(1.05)'\n      })),\n      // then scale down back to normal size while beginning to fade out\n      animate(50, style({\n        transform: 'scale(1)',\n        opacity: 0.75\n      })),\n      // scale down and fade out completely\n      animate('120ms ease-out', style({\n        transform: 'scale(0.68)',\n        opacity: 0\n      })),\n      // then animate the spacing (which includes height, margin and padding)\n      animate('150ms ease-out', style({\n        height: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        paddingRight: 0,\n        paddingLeft: 0,\n        'margin-bottom': '0'\n      }))])]), trigger('listAnim', [transition('* => *', [query(':enter', [style({\n        opacity: 0,\n        height: 0\n      }), stagger(100, [animate('0.2s ease')])], {\n        optional: true\n      })])])]\n    }\n  });\n  return NotesListComponent;\n}();\nexport { NotesListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}