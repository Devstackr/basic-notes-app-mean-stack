{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, empty, throwError } from 'rxjs';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nvar WebRequestInterceptor = /** @class */function () {\n  function WebRequestInterceptor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  WebRequestInterceptor.prototype.intercept = function (request, next) {\n    var _this = this;\n    request = this.addAuthHeader(request);\n    // call next() and handle the response\n    return next.handle(request).pipe(catchError(function (error) {\n      console.log(error);\n      if (error.status === 401 && request.url.endsWith('/users/me/access-token')) {\n        // this means that we tried to refresh the access token but failed\n        // so therefore the refresh token has expired\n        console.log(\"Refresh Token has expired\");\n        _this.authService.removeStorageItems();\n        // redirect the user to /login\n        _this.router.navigateByUrl(\"/login\");\n        return empty();\n      }\n      if (error.status === 401) {\n        // 401 error means we are unauthorized\n        // not /users/me/access-token therefore the Access Token has expired\n        // We have to try and refresh the Access Token.\n        return _this.refreshAccessToken().pipe(switchMap(function () {\n          request = _this.addAuthHeader(request);\n          return next.handle(request);\n        }), catchError(function (err) {\n          console.log(\"Catching Error\");\n          console.log(err);\n          _this.authService.removeStorageItems();\n          _this.router.navigateByUrl('/login');\n          return empty();\n        }));\n      }\n      return throwError(error);\n    }));\n  };\n  WebRequestInterceptor.prototype.refreshAccessToken = function () {\n    return this.authService.getNewAccessToken().pipe(tap(function () {\n      console.log(\"Access Token Refreshed\");\n    }));\n  };\n  WebRequestInterceptor.prototype.addAuthHeader = function (request) {\n    // get the access token\n    var token = this.authService.getAccessToken();\n    if (token) {\n      // append the access token to the request header\n      return request.clone({\n        setHeaders: {\n          'x-access-token': token\n        }\n      });\n    }\n    return request;\n  };\n  WebRequestInterceptor.ɵfac = function WebRequestInterceptor_Factory(t) {\n    return new (t || WebRequestInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  WebRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebRequestInterceptor,\n    factory: WebRequestInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return WebRequestInterceptor;\n}();\nexport { WebRequestInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}